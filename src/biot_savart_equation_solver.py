import numpy as np
from scipy.constants import mu_0, pi

from src.fields import VectorField



from scipy.integrate import quad
import sympy as smp
from sympy.vector import cross



class BiotSavartEquationSolver:
    """
    A Biot–Savart law solver used to compute the resultant magnetic field B in 2D-space generated by a constant current
    field I (for example due to wires).
    """

    def solve(self, electric_current: VectorField) -> VectorField:
        """
        Solve the Biot–Savart equation to compute the magnetic field given an electric current field.

        Parameters
        ----------
        electric_current : VectorField
            A vector field I : ℝ² → ℝ³ ; (x, y) → (I_x(x, y), I_y(x, y), I_z(x, y)), where I_x(x, y), I_y(x, y) and
            I_z(x, y) are the 3 components of the electric current vector at a given point (x, y) in space. Note that
            I_z = 0 is always True in our 2D world.

        Returns
        -------
        magnetic_field : VectorField
            A vector field B : ℝ² → ℝ³ ; (x, y) → (B_x(x, y), B_y(x, y), B_z(x, y)), where B_x(x, y), B_y(x, y) and
            B_z(x, y) are the 3 components of the magnetic vector at a given point (x, y) in space. Note that
            B_x = B_y = 0 is always True in our 2D world.
        """
        
        t, x, y, z = smp.symbols('t, x, y, z')

        l = electric_current 
        r = smp.Matrix([x, y, z])

        sep = r-l

        integrand = smp.diff(l, t).cross(sep) / sep.norm()**3

        dBxdt = smp.lambdify([t, x, y, z], integrand[0])
        dBydt = smp.lambdify([t, x, y, z], integrand[1])
        dBzdt = smp.lambdify([t, x, y, z], integrand[2])

        
        B_1 =  np.array([smp.integrate(dBxdt, x)], [smp.integrate(dBydt, y)], [smp.integrate(dBzdt, )])
        magnetic_field = (mu_0/4*pi) * B_1

        return magnetic_field

